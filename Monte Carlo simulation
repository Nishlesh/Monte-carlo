import numpy as np
def monte_carlo(S,X,r, sigma, T, num_simulations):
    # calculate required variables 
    dt = T/252
    num_days = int(T*252)

    #stimulate stock price paths
    stock_price_paths = np.zeros((num_simulations,num_days+1))
    stock_price_paths[:,0] = S

    for i in range(num_simulations):
        for j in range(1, num_days+1):
            daily_returns = np.exp((r - 0.05*sigma**2)*dt + sigma*np.sqrt(dt)*np.random.randn())
            stock_price_paths[i,j]= stock_price_paths[i,j-1]*daily_returns

    call_payout = np.maximum(stock_price_paths[:,-1] - X , 0)
    option_price = np.mean(call_payout)* np.exp(-r*T)
    return option_price

# Time for testing our code guys!!
S = 200
X = 220
r = 0.04
sigma = 0.3
T = 0.5
num_simulations = 10000
option_price = monte_carlo(S,X,r,sigma, T, num_simulations)
print("Estimated option price" , option_price)
